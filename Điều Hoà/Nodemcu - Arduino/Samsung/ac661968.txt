#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>
#include <ir_Samsung.h>
#include <EEPROM.h>

IRSamsungAc IR_AC(D4);
 
const char* ssid     = "************";
const char* password = "************";
const char* mqttServer = "***********";
const int mqttPort = 1883;
const char* mqttUser = "************";
const char* mqttPassword = "************";

#define POWER "bed_room/ac/power/set"
#define MODE "bed_room/ac/mode/set"
#define TEMP "bed_room/ac/temperature/set"
#define FAN "bed_room/ac/fan/set"
#define SWING "bed_room/ac/swing/set"

#define AC_OFF      0
#define AC_COOL     kSamsungAcCool
#define AC_FAN_ONLY kSamsungAcFan
#define AC_DRY      kSamsungAcDry
#define FAN_LOW     kSamsungAcFanLow
#define FAN_MID     kSamsungAcFanMed
#define FAN_HIGH    kSamsungAcFanHigh
#define FAN_AUTO    kSamsungAcFanAuto

#define SWING_OFF 0
#define SWING_ON  1
 
WiFiClient espClient;
PubSubClient client(espClient);

bool mode = 0;
uint8_t temp = 0;
uint8_t fanMode = 0;
uint8_t swingMode = 0;
 
void setup() {
  Serial.begin(115200);
  EEPROM.begin(512);

  mode = EEPROM.read(0);
  temp = EEPROM.read(1);
  fanMode = EEPROM.read(2);
  swingMode = EEPROM.read(3);

  if((mode == 0xFF) && (temp == 0xFF) && (fanMode == 0xFF) && (swingMode == 0xFF))
  {
    mode = AC_OFF;
    EEPROM.write(0, mode);
    temp = 28;
    EEPROM.write(1, temp);
    fanMode = FAN_AUTO;
    EEPROM.write(2, fanMode);
    swingMode = SWING_OFF;
    EEPROM.write(3, swingMode);
  }

  Serial.print("mode: ");Serial.println(mode);
  Serial.print("temp: ");Serial.println(temp);
  Serial.print("fanMode: ");Serial.println(fanMode);
  Serial.print("swingMode: ");Serial.println(swingMode);
  
  IR_AC.begin();
  
 
  WiFi.begin(ssid, password);
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Connecting to WiFi..");
  }
  Serial.println("Connected to the WiFi network");
 
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);
 
  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");
 
    if (client.connect("ESP8266Client", mqttUser, mqttPassword )) {
 
      Serial.println("connected");  
 
    } else {
 
      Serial.print("failed with state ");
      Serial.print(client.state());
      delay(2000);
 
    }
  }
 
  client.subscribe(POWER);
  client.subscribe(MODE);
  client.subscribe(TEMP);
  client.subscribe(FAN);
  client.subscribe(SWING);
 
}
 
void callback(char* topic, byte* payload, unsigned int length) {

  char buffer[length];
  memset(buffer,NULL,15);
 
  Serial.print("Message arrived in topic: ");
  Serial.println(topic);
 
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    //Serial.print((char)payload[i]);
    buffer[i] = (char)payload[i];
  }
  Serial.println();

  if(!strcmp(topic,MODE))
  {
    if(!strcmp(buffer,"off"))
    {
      Serial.println("off");
      mode = AC_OFF;
      EEPROM.write(0, mode);
    }
    else if(!strcmp(buffer,"cool"))
    {
      Serial.println("cool");
      mode = AC_COOL;
      EEPROM.write(0, mode);
    }
    else if(!strcmp(buffer,"dry"))
    {
      Serial.println("dry");
      mode = AC_DRY;
      EEPROM.write(0, mode);
    }
    else if(!strcmp(buffer,"fan_only"))
    {
      Serial.println("fan only");
      mode = AC_FAN_ONLY;
      EEPROM.write(0, mode);
    }
  }
  else if(!strcmp(topic,TEMP))
  {
    temp = (payload[0] - 48)*10 + (payload[1] - 48);
    Serial.println(temp);
    EEPROM.write(1, temp);
  }
  else if(!strcmp(topic,FAN))
  {
    if(!strcmp(buffer,"low"))
    {
      Serial.println("low");
      fanMode = FAN_LOW;
      EEPROM.write(2, fanMode);
    }
    else if(!strcmp(buffer,"medium"))
    {
      Serial.println("mid");
      fanMode = FAN_MID;
      EEPROM.write(2, fanMode);
    }
    else if(!strcmp(buffer,"high"))
    {
      Serial.println("high");
      fanMode = FAN_HIGH;
      EEPROM.write(2, fanMode);
    }
    else if(!strcmp(buffer,"auto"))
    {
      Serial.println("auto");
      fanMode = FAN_AUTO;
      EEPROM.write(2, fanMode);
    }
  }
  else if(!strcmp(topic,SWING))
  {
    if(!strcmp(buffer,"off"))
    {
      Serial.println("off");
      swingMode = SWING_OFF;
      EEPROM.write(3, swingMode);
    }
    else if(!strcmp(buffer,"on"))
    {
      Serial.println("on");
      swingMode = SWING_ON;
      EEPROM.write(3, swingMode);
    }
  }
  if(mode == AC_OFF)
  {
    IR_AC.off();
  }
  else
  {
    IR_AC.on();
    IR_AC.setFan(fanMode);
    IR_AC.setMode(mode);
    IR_AC.setTemp(temp);
    if(swingMode == SWING_OFF)
    {
      IR_AC.setSwing(kSamsungAcSwingStop);
    }
    else
    {
      IR_AC.setSwing(kSamsungAcSwingMove);
    }
  }
  IR_AC.send();
  EEPROM.commit();
  bool mode = 0;
  int temp = 0;
  int fanMode = 0;
  int swingMode = 0;
  Serial.println();
  Serial.println("-----------------------");
 
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("ESP8266Client")) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe(POWER);
      client.subscribe(MODE);
      client.subscribe(TEMP);
      client.subscribe(FAN);
      client.subscribe(SWING);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}
 
void loop() {
  client.loop();
  if (!client.connected()) {
    reconnect();
  }
}